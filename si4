#!/usr/local/bin/ruby

require 'json'
require 'logger'
require 'sqlite3'
require 'htauth'
require 'sinatra/base'
require 'thin'

class Tail

    def initialize(file)
        @file = file
    end

    def first
        f = File.open(@file,"r")
        f.seek(-500, :END)
        f.readline
        res = String.new
        f.each do |line|
            line.chomp!
            line += '<br/>'
            line += "\n"
            res += line
        end
        @pos = f.tell
        f.close
        res
    end

    def last
        f = File.open(@file, "r")
        f.seek(@pos)
        res = String.new
        f.each do |line| 
            line.chomp!
            line += '<br/>'
            line += "\n"
            res += line
        end
        @pos = f.tell
        f.close
        res
    end
    def pos
        @pos
    end
    def pos=(pos)
        @pos = pos
    end
end

class DB
    def initialize(dbname)
        @dbname = dbname
    end

    def query(query)
        db = SQLite3::Database.open @dbname
        db.results_as_hash = true
        res = db.execute(query)
        db.close unless db.closed?
        res
    end
end

class Domain < DB

    def count
        res = self.query("select count(id) as count from domain")
        res.first['count']
    end

    def nextid
        return 1 if self.count == 0
        res = self.query("select id from domain order by id desc limit 1")
        res.first['id'] += 1
    end

    def list
        self.query("select * from domain order by id")
    end

    def name?(name)
        res = self.query("select * from domain where name = '#{name}' order by id limit 1")
        return true if res.count > 0
        false
    end

    def id?(id)
        res = self.query("select * from domain where id = '#{id}' limit 1")
        return true if res.count > 0
        false
    end

    def id(name)
        res = self.query("select id from domain where name = '#{name}' order by id limit 1")
        return nil if res.count == 0
        res.first['id']
    end

    def name(id)
        res = self.query("select name from domain where id = '#{id}' limit 1")
        return nil if res.count == 0
        res.first['name']
    end

    def add(name)
        return false if self.name?(name)
        id = self.nextid
        self.query("insert into domain (id, name) values (#{id}, '#{name}')")
        self.name?(name)
    end

    def delete(id)
        return true unless self.id?(id)
        self.query("delete from domain where id = '#{id}'")
        !self.id?(id)
    end

    def update(id, newname)
        return false unless self.id?(id)
        return false if self.name?(newname)
        self.query("update domain set name = '#{newname}' where id = '#{id}'")
        self.name?(newname)
    end
end

class User < DB

    def initialize(db)
        super(db)
        @domain = Domain.new(db)
    end

    def count
        res = self.query("select count(id) as count from user")
        res.first['count']
    end

    def nextid
        return 1 if self.count == 0
        res = self.query("select id from user order by id desc limit 1")
        res.first['id'] += 1
    end

    def list
        self.query("select u.id, u.name, u.domainid, d.name as domain, u.password 
                    from user u, domain d
                    where u.domainid = d.id 
                    order by d.name, u.name")
    end

    def name?(name, domainid)
        return false unless @domain.id?(domainid)
        res = self.query("select u.id from user u, domain d 
                            where u.name = '#{name}' and u.domainid = d.id limit 1")
        return true if res.count > 0
        false
    end

    def id?(userid)
        res = self.query("select id from user where id = '#{userid}' limit 1")
        return true if res.count > 0
        false
    end

    def add(name, domainid, password)
        return false if self.name?(name, domainid)
        return false unless @domain.id?(domainid)
        id = self.nextid
        self.query("insert into user(id, name, domainid, password) 
                        values (#{id}, '#{name}', #{domainid}, '#{password}')")
        self.name?(name, domainid)
    end

    def delete(userid)
        return true if not self.id?(userid)
        self.query("delete from user where id = #{userid}")
        !self.id?(userid)
    end

end

class Alias < DB

    def initialize(db)
        super(db)
        @domain = Domain.new(db)
    end

    def count
        res = self.query("select count(id) as count from alias")
        res.first['count']
    end

    def nextid
        return 1 if self.count == 0
        res = self.query("select id from alias order by id desc limit 1")
        res.first['id'] += 1
    end

    def list
        self.query("select a.id, a.name, a.domainid, d.name as domain, goto
                    from alias a, domain d
                    where a.domainid = d.id
                    order by d.name, a.name")
    end

    def name?(name, domainid)
        return false unless @domain.id?(domainid)
        res = self.query("select a.id from alias a, domain d 
                            where a.name = '#{name}' and a.domainid = d.id limit 1")
        return true if res.count > 0
        false
    end

    def id?(userid)
        res = self.query("select id from alias where id = '#{userid}' limit 1")
        return true if res.count > 0
        false
    end

    def add(name, domainid, goto)
        return false if self.name?(name, domainid)
        return false unless @domain.id?(domainid)
        id = self.nextid
        self.query("insert into add(id, name, domainid, goto) 
                        values (#{id}, '#{name}', #{domainid}, '#{goto}')")
        self.name?(name, domainid)
    end

    def delete(id)
        return true if not self.id?(id)
        self.query("delete from alias where id = #{id}")
        !self.id?(id)
    end

end



class SecureThinBackend < Thin::Backends::TcpServer
  def initialize(host, port, options)
    super(host, port)
    @ssl = true
    @ssl_options = options
  end
end


class App < Sinatra::Base

    @@pwfile = "/usr/local/etc/si4/pw"

    @@weblog = "/var/log/si4/access.log"
    @@errlog = "/var/log/si4/error.log"
    @@pidfile = "/var/run/si4/pid"

    @@crtfile = "/usr/local/etc/si4/crt"
    @@keyfile = "/usr/local/etc/si4/key"
    @@dbname = "/var/db/si4/db"

    @@user = User.new(@@dbname)
    @@domain = Domain.new(@@dbname)
    @@alias = Alias.new(@@dbname)

    def self.pidfile
        @@pidfile
    end

    def self.errlog
        @@errlog
    end

    def user?(user, password)
        logger.info("Auth: User #{user} try get access")
        unless File.readable?(@@pwfile) then
            logger.warning("Auth: Cannot read #{@@pwfile}")
            return false
        end
        File.open(@@pwfile).each do | line |
            htuser, digest = line.strip.split(':')
            next unless htuser == user
            if digest.match(/apr1/) then
                dummy, apr, salt = digest.split('$')
                md5 = HTAuth::Md5.new( 'salt' => salt )
                if md5.encode(password) == digest then
                    logger.info("Auth: User #{user} access granted")
                    return true
                end
            elsif digest.match(/SHA/) then
                sha1 = HTAuth::Sha1.new
                if sha1.encode(password) == digest then
                    logger.info("Auth: User #{user} access granted")
                    return true
                end
            end
        end
        return false
    end

    configure do
#        logfile = File.new(@@weblog, 'a')
#        logfile.sync = true
#        use Rack::CommonLogger, logfile

        set :public_folder, '/usr/local/share/si4/public'
        set :views, '/usr/local/share/si4/templ'
        set :server, "thin"
        set :secret, '3d04dd2b1403a7ed52373953e8bbf921'
        set :port, 8081
        set :bind, '0.0.0.0'

        set :sessions, true
        set :show_exceptions, true 
        set :logging, true
        set :dump_errors, true
        set :raise_errors, true
        set :quiet, true

#        class << settings
#            def server_settings
#                {
#                    :backend          => SecureThinBackend,
#                    :private_key_file => @@keyfile,
#                    :cert_chain_file  => @@crtfile,
#                    :verify_peer      => false
#                }
#            end
#        end
    end

    not_found do
        erb :not_found
    end

    error do
        erb :error
    end

    error 401 do
        redirect to '/login'
    end

    helpers do
        def auth? 
            redirect to '/login' unless session[:user]
#            halt 401 unless session[:user]
        end
        def user
            @@user
        end
        def domain
            @@domain
        end
        def alias
            @@alias
        end
    end

    get '/login' do
        erb :login, :layout => false
    end

    post '/login' do
        if user?(params['username'], params['password']) then
                session[:user] = params['username']
                redirect to "/"
        else
            erb :login, :layout => false
        end
    end

    get '/logout' do
        session.clear
        redirect to '/login'
    end

    get '/hello' do 
        content_type :json
        { message: "hello" }.to_json
    end

    get '/' do
        #auth?
        erb :index
    end

    get '/tail' do
        l = true unless params['next']
        l = false if params['next']
        erb :tail, :layout => l
    end


    before do
        logger.datetime_format = '%Y-%m-%d %H:%M:%S'
        logger.formatter = proc do |severity, datetime, progname, msg|
            "SINATRA #{datetime}: #{severity} #{msg}\n"
        end
        user = session[:user] or 'undef'
        logger.info("#{request.request_method} #{request.url} from #{request.ip} as #{session[:user]}")
    end
end

Process.euid = Etc.getpwnam("root").uid
Process.daemon

errlog = File.new(App.errlog, "a+")
errlog.sync = true
$stdout.reopen(errlog)
$stderr.reopen(errlog)

begin
    File.open(App.pidfile, 'w') do
            |file| file.write Process.pid
    end
rescue
    puts "Cannot write pid file #{App.pidfile}\n"
    exit
end

App.run!
File.delete App.pidfile if File.exist? App.pidfile
#EOF
